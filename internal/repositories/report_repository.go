package repositories

import (
	"database/sql"
	"time"

	"pentest-report/internal/models"

)

type ReportRepository struct {
	DB *sql.DB
}

func NewReportRepository(db *sql.DB) *ReportRepository {
	return &ReportRepository{DB: db}
}

// AddReport adds a new report to the database
func (repo *ReportRepository) CreateReport(report *models.Report) error {
	query := `INSERT INTO reports (project_id, name, date, author, status) VALUES (?, ?, ?, ?, ?)`
	_, err := repo.DB.Exec(query, report.ProjectID, report.Name, report.Date, report.Author, report.Status)
	return err
}

func (repo *ReportRepository) GetReportsByProjectID(projectID int) ([]models.ReportWithAuthor, error) {
	query := `SELECT id, project_id, name, date, author, status FROM reports WHERE project_id = ?`
	rows, err := repo.DB.Query(query, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var reports []models.ReportWithAuthor
	for rows.Next() {
		var report models.ReportWithAuthor
		var date string
		if err := rows.Scan(&report.ID, &report.ProjectID, &report.Name, &date, &report.Author, &report.Status); err != nil {
			return nil, err
		}

		// Convert date string to time.Time
		report.Date, err = time.Parse("2006-01-02", date)
		if err != nil {
			return nil, err
		}

		reports = append(reports, report)
	}

	return reports, nil
}

func (repo *ReportRepository) GetReportDetailByID(id int) (*models.ReportDetail, error) {
    query := `
        SELECT id, project_id, name, date, author, status
        FROM reports
        WHERE id = ?
    `
    row := repo.DB.QueryRow(query, id)
    
    var reportDetail models.ReportDetail
	var date string
    if err := row.Scan(&reportDetail.ID, &reportDetail.ProjectID, &reportDetail.Name, &date, &reportDetail.Author, &reportDetail.Status); err != nil {
        return nil, err
    }

	// Convert date string to time.Time
	reportDetail.Date, _ = time.Parse("2006-01-02", date)
    
    return &reportDetail, nil
}

func (repo *ReportRepository) DeleteReport(reportID int) error {
    query := "DELETE FROM reports WHERE id = ?"
    _, err := repo.DB.Exec(query, reportID)
    return err
}

func (repo *ReportRepository) UpdateReport(reportID int, report *models.ReportUpdate) error {
    query := `
        UPDATE reports
        SET name = ?
        WHERE id = ?
    `
    _, err := repo.DB.Exec(query, report.Name, reportID)
    return err
}

func (repo *ReportRepository) GetRecentReports() ([]models.ReportRecent, error) {
    query := `
        SELECT id, name, date, author, status
        FROM reports
        ORDER BY date DESC
        LIMIT 10;
    `
    rows, err := repo.DB.Query(query)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var reports []models.ReportRecent
    for rows.Next() {
        var report models.ReportRecent
		var date string
        if err := rows.Scan(&report.ID, &report.Name, &date, &report.Author, &report.Status); err != nil {
            return nil, err
        }

		report.Date, _ = time.Parse("2006-01-02", date)
        reports = append(reports, report)
    }
    return reports, nil
}