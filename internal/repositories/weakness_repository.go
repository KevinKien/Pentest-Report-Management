package repositories

import (
    "database/sql"

    "pentest-report/internal/models"

)

type WeaknessRepository struct {
    DB *sql.DB
}

func NewWeaknessRepository(db *sql.DB) *WeaknessRepository {
    return &WeaknessRepository{DB: db}
}

func (repo *WeaknessRepository) AddWeakness(weakness *models.Weakness) error {
    query := `
        INSERT INTO weaknesses (external_id, weakness_type, description, link)
        VALUES (?, ?, ?, ?)
    `
    _, err := repo.DB.Exec(query, weakness.ExternalID, weakness.WeaknessType, weakness.Description, weakness.Link)
    return err
}

func (repo *WeaknessRepository) GetWeaknessByID(id int) (*models.Weakness, error) {
    query := `
        SELECT id, external_id, weakness_type, description, link
        FROM weaknesses
        WHERE id = ?
    `
    row := repo.DB.QueryRow(query, id)
    
    var weakness models.Weakness
    if err := row.Scan(&weakness.ID, &weakness.ExternalID, &weakness.WeaknessType, &weakness.Description, &weakness.Link); err != nil {
        return nil, err
    }
    
    return &weakness, nil
}

func (repo *WeaknessRepository) GetAllWeaknesses() ([]models.Weakness, error) {
    query := `
        SELECT id, external_id, weakness_type, description, link
        FROM weaknesses
    `
    rows, err := repo.DB.Query(query)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    
    var weaknesses []models.Weakness
    for rows.Next() {
        var weakness models.Weakness
        if err := rows.Scan(&weakness.ID, &weakness.ExternalID, &weakness.WeaknessType, &weakness.Description, &weakness.Link); err != nil {
            return nil, err
        }
        weaknesses = append(weaknesses, weakness)
    }
    
    return weaknesses, nil
}

func (repo *WeaknessRepository) DeleteWeakness(weaknessID int) error {
    query := "DELETE FROM weaknesses WHERE id = ?"
    _, err := repo.DB.Exec(query, weaknessID)
    return err
}

func (repo *WeaknessRepository) UpdateWeakness(weaknessID int, weakness *models.WeaknessUpdate) error {
    query := `
        UPDATE weaknesses
        SET name = ?, description = ?, severity = ?
        WHERE id = ?
    `
    _, err := repo.DB.Exec(query, weakness.Name, weakness.Description, weakness.Severity, weaknessID)
    return err
}