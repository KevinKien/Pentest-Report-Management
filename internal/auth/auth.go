package auth

import (
	"errors"
	"time"
	"net/http"
	"strings"
	"os"

	"github.com/dgrijalva/jwt-go"
	"github.com/labstack/echo"
	"github.com/joho/godotenv"

)

// JWTClaims represents JWT claims
type JWTClaims struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	jwt.StandardClaims
}

// GenerateToken generates JWT token for the given username and role
func GenerateToken(username, role string) (string, error) {
	claims := &JWTClaims{
		Username: username,
		Role:     role,
		StandardClaims: jwt.StandardClaims{
			ExpiresAt: time.Now().Add(time.Hour * 1).Unix(), // Token expires in 24 hours
		},
	}

	err := godotenv.Load(".env")
    if err != nil {
        return "", errors.New("error .env")
    }

	secretKey := os.Getenv("JWT_SECRET")
    if secretKey == "" {
        return "", errors.New("JWT Secret not found")
    }

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString([]byte(secretKey)) 
}

// MiddlewareJWT kiểm tra xác thực bằng token JWT
func MiddlewareJWT(next echo.HandlerFunc) echo.HandlerFunc {
    return func(c echo.Context) error {
		// Load environment variables from .env file
        err := godotenv.Load(".env")
        if err != nil {
            return err
        }

        // Lấy token từ header "Authorization"
        authHeader := c.Request().Header.Get("Authorization")
        if authHeader == "" {
            return echo.NewHTTPError(http.StatusUnauthorized, "Missing authorization header")
        }

        // Kiểm tra xem header có chứa "Bearer " không
        parts := strings.Split(authHeader, " ")
        if len(parts) != 2 || parts[0] != "Bearer" {
            return echo.NewHTTPError(http.StatusUnauthorized, "Invalid authorization header")
        }

        // Lấy token từ phần thân của header
        tokenString := parts[1]

		secretKey := os.Getenv("JWT_SECRET")
        if secretKey == "" {
            return echo.NewHTTPError(http.StatusInternalServerError, "Secret key not found")
        }

        // Kiểm tra token
        token, err1 := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
            // Đảm bảo phương thức ký là HMAC và trả về khóa bí mật
            if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
                return nil, echo.NewHTTPError(http.StatusUnauthorized, "Invalid token")
            }
            return []byte(secretKey), nil
        })
        if err1 != nil {
            return echo.NewHTTPError(http.StatusUnauthorized, "Invalid token")
        }

        // Kiểm tra token có hợp lệ không
        if !token.Valid {
            return echo.NewHTTPError(http.StatusUnauthorized, "Invalid token")
        }

        // Lưu thông tin người dùng từ token vào context
        claims := token.Claims.(jwt.MapClaims)
        c.Set("username", claims["username"].(string))
        c.Set("role", claims["role"].(string))

        // Tiếp tục xử lý request
        return next(c)
    }
}

// GetUsernameFromToken retrieves username from JWT token
func GetUsernameFromToken(tokenString string) (string, error) {
	// Load environment variables from .env file
	err1 := godotenv.Load(".env")
	if err1 != nil {
		return "", errors.New("error .env")
	}

	secretKey := os.Getenv("JWT_SECRET")
    if secretKey == "" {
        return "", errors.New("key not found")
    }

	token, err := jwt.ParseWithClaims(tokenString, &JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(secretKey), nil
	})

	if err != nil || !token.Valid {
		return "", errors.New("invalid token")
	}

	claims, ok := token.Claims.(*JWTClaims)
	if !ok {
		return "", errors.New("invalid token")
	}

	return claims.Username, nil
}

// GetRoleFromToken retrieves role from JWT token
func GetRoleFromToken(tokenString string) (string, error) {
	// Load environment variables from .env file
	err1 := godotenv.Load(".env")
	if err1 != nil {
		return "", errors.New("invalid env")
	}

	secretKey := os.Getenv("JWT_SECRET")
    if secretKey == "" {
        return "", errors.New("no key")
    }

	token, err := jwt.ParseWithClaims(tokenString, &JWTClaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(secretKey), nil 
	})

	if err != nil || !token.Valid {
		return "", errors.New("invalid token")
	}

	claims, ok := token.Claims.(*JWTClaims)
	if !ok {
		return "", errors.New("invalid token")
	}

	return claims.Role, nil
}


// MiddlewareAdmin kiểm tra xem người dùng có quyền admin không
func MiddlewareAdmin(next echo.HandlerFunc) echo.HandlerFunc {
    return func(c echo.Context) error {
        // Kiểm tra quyền của người dùng từ JWT token
        role := c.Get("role").(string)
        if role != "admin" {
            return echo.NewHTTPError(http.StatusUnauthorized, "Unauthorized")
        }

        return next(c)
    }
}