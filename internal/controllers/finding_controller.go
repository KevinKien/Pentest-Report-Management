package controllers

import (
    "net/http"
    "strconv"
    "time"

    "github.com/labstack/echo"

    "pentest-report/internal/models"
    "pentest-report/internal/services"

)

type FindingController struct {
    FindingService *services.FindingService
}

func NewFindingController(findingService *services.FindingService) *FindingController {
    return &FindingController{FindingService: findingService}
}


func (controller *FindingController) AddFinding(c echo.Context) error {
    finding := new(models.Finding)
    if err := c.Bind(finding); err != nil {
        return err
    }

    username := c.Get("username").(string)
    finding.Author = username
    finding.CreatedAt = time.Now()

    if err := controller.FindingService.AddFinding(finding); err != nil {
        return err
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Finding added successfully"})
}

func (controller *FindingController) GetFindingsByReportID(c echo.Context) error {
    reportID, err := strconv.Atoi(c.Param("reportID"))
    if err != nil {
        return err
    }

    findings, err := controller.FindingService.GetFindingsByReportID(reportID)
    if err != nil {
        return err
    }

    return c.JSON(http.StatusOK, findings)
}

func (controller *FindingController) GetAllFindingsForReport(c echo.Context) error {
    reportID := c.Param("id")
    reportIDInt, err := strconv.Atoi(reportID)
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid report ID"})
    }

    findings, err := controller.FindingService.GetAllFindingsForReport(reportIDInt)
    if err != nil {
        //return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to get findings for report"})
		return err
    }

    var response []models.FindingResponse
    for _, finding := range findings {
        response = append(response, finding.ToResponse())
    }

    return c.JSON(http.StatusOK, response)
}


// Delete Finding
func (controller *FindingController) DeleteFinding(c echo.Context) error {
    findingID, err := strconv.Atoi(c.Param("findingID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid finding ID"})
    }

    if err := controller.FindingService.DeleteFinding(findingID); err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete finding"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Finding deleted successfully"})
}

// Edit Finding
func (controller *FindingController) EditFinding(c echo.Context) error {
    findingID, err := strconv.Atoi(c.Param("findingID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid finding ID"})
    }

    finding := new(models.Finding)
    if err := c.Bind(finding); err != nil {
        return err
    }

    if err := controller.FindingService.EditFinding(findingID, finding); err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to edit finding"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Finding edited successfully"})
}

// Filter Findings
func (controller *FindingController) FilterFindings(c echo.Context) error {
    name := c.QueryParam("name")
    status := c.QueryParam("status")
    severity := c.QueryParam("severity")
    author := c.QueryParam("author")
    id := c.QueryParam("id")

    findings, err := controller.FindingService.FilterFindings(name, status, severity, id, author)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to filter findings"})
    }

    return c.JSON(http.StatusOK, findings)
}