package controllers

import (
	"net/http"
	"strconv"

	"github.com/labstack/echo"

	"pentest-report/internal/models"
	"pentest-report/internal/services"

)

type ReportController struct {
	ReportService *services.ReportService
}

func NewReportController(reportService *services.ReportService) *ReportController {
	return &ReportController{ReportService: reportService}
}

// CreateReport handles creation of a new report
func (controller *ReportController) CreateReport(c echo.Context) error {
	var req models.CreateReportRequest
	if err := c.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request payload")
	}

	projectID, err := strconv.Atoi(req.ProjectID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid project ID")
	}

	author := c.Get("username").(string)

	Status := "Open"

	if err := controller.ReportService.CreateReport(projectID, req.Name, author, Status); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, "Failed to create report")
	}

	return c.JSON(http.StatusCreated, map[string]string{"message": "Report created successfully"})
}


func (controller *ReportController) GetReportDetailByID(c echo.Context) error {
    id, err := strconv.Atoi(c.Param("id"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid report ID"})
    }

    reportDetail, err := controller.ReportService.GetReportDetailByID(id)
    if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to get report"})
        //return err
    }

    return c.JSON(http.StatusOK, reportDetail)
}

func (controller *ReportController) DeleteReport(c echo.Context) error {
    reportIDStr := c.Param("id")
	if reportIDStr == "" {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Report ID is null"})
	}

	reportID, err := strconv.Atoi(reportIDStr)
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid report ID"})
	}

    err = controller.ReportService.DeleteReport(reportID)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete report"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Report deleted successfully"})
}

func (controller *ReportController) UpdateReport(c echo.Context) error {
    reportID, err := strconv.Atoi(c.Param("id"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid report ID"})
    }

    var report models.ReportUpdate
    if err := c.Bind(&report); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request payload"})
    }

    err = controller.ReportService.UpdateReport(reportID, &report)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to update report"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Report updated successfully"})
}

func (controller *ReportController) GetRecentReports(c echo.Context) error {
    reports, err := controller.ReportService.GetRecentReports()
    if err != nil {
        //return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to get reports"})
		return err
    }

    return c.JSON(http.StatusOK, reports)
}