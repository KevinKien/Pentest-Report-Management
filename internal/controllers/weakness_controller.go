package controllers

import (
    "net/http"
    "strconv"

    "github.com/labstack/echo"

    "pentest-report/internal/models"
    "pentest-report/internal/services"

)

type WeaknessController struct {
    WeaknessService *services.WeaknessService
}

func NewWeaknessController(weaknessService *services.WeaknessService) *WeaknessController {
    return &WeaknessController{WeaknessService: weaknessService}
}

func (controller *WeaknessController) AddWeakness(c echo.Context) error {
    var weakness models.Weakness
    if err := c.Bind(&weakness); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid input"})
    }

    if err := controller.WeaknessService.AddWeakness(&weakness); err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"error": "Failed to add weakness"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Weakness added successfully"})
}

func (controller *WeaknessController) GetWeaknessByID(c echo.Context) error {
    id, err := strconv.Atoi(c.Param("id"))
    if err != nil {
        return err
    }

    weakness, err := controller.WeaknessService.GetWeaknessByID(id)
    if err != nil {
        return err
    }

    return c.JSON(http.StatusOK, weakness)
}

func (controller *WeaknessController) GetAllWeaknesses(c echo.Context) error {
    weaknesses, err := controller.WeaknessService.GetAllWeaknesses()
    if err != nil {
        return err
    }

    return c.JSON(http.StatusOK, weaknesses)
}


func (controller *WeaknessController) DeleteWeakness(c echo.Context) error {
    weaknessID, err := strconv.Atoi(c.Param("id"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid weakness ID"})
    }

    err = controller.WeaknessService.DeleteWeakness(weaknessID)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete weakness"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Weakness deleted successfully"})
}

func (controller *WeaknessController) UpdateWeakness(c echo.Context) error {
    weaknessID, err := strconv.Atoi(c.Param("weaknessID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid weakness ID"})
    }

    var weakness models.WeaknessUpdate
    if err := c.Bind(&weakness); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request payload"})
    }

    err = controller.WeaknessService.UpdateWeakness(weaknessID, &weakness)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to update weakness"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Weakness updated successfully"})
}