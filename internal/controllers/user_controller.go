package controllers

import (
	"net/http"
    "strconv"

	"github.com/labstack/echo"
	"golang.org/x/crypto/bcrypt"

	"pentest-report/internal/models"
	"pentest-report/internal/services"

)

type UserController struct {
	UserService *services.UserService
}

func NewUserController(userService *services.UserService) *UserController {
	return &UserController{UserService: userService}
}

// AddUser handles creation of a new user
func (controller *UserController) AddUser(c echo.Context) error {
    // Tạo một biến để chứa thông tin người dùng từ JSON
    type userData struct {
        Username string `json:"username"`
        Password string `json:"password"`
        Role     string `json:"role"`
    }

    // Giải nén dữ liệu JSON vào biến user
    user := new(userData)
    if err := c.Bind(user); err != nil {
        return err
    }

    // Kiểm tra xem username đã tồn tại hay chưa
    exists, err := controller.UserService.CheckUsernameExists(user.Username)
    if err != nil {
        return err
    }
    if exists {
        return echo.NewHTTPError(http.StatusBadRequest, "Username already exists")
    }

    // Hash mật khẩu
    hashedPassword, err := bcrypt.GenerateFromPassword([]byte(user.Password), bcrypt.DefaultCost)
    if err != nil {
        return err
    }

    // Thêm người dùng vào cơ sở dữ liệu
    newUser := &models.User{
        Username: user.Username,
        Password: string(hashedPassword),
        Role:     user.Role,
    }
    err = controller.UserService.AddUser(newUser)
    if err != nil {
        return err
    }

    // Trả về thông tin người dùng đã được thêm
    return c.JSON(http.StatusCreated, map[string]string{"message": "User created success!"})
}

// GetAllUsers trả về tên người dùng và vai trò của tất cả người dùng từ cơ sở dữ liệu
func (controller *UserController) GetAllUsers(c echo.Context) error {
    // Lấy tất cả người dùng từ service
    users, err := controller.UserService.GetAllUsers()
    if err != nil {
        return err
    }

    // Tạo slice để lưu trữ thông tin username và role của mỗi người dùng
    var userInfos []map[string]string

    // Lặp qua danh sách người dùng và lấy thông tin username và role của mỗi người dùng
    for _, user := range users {
        userInfo := map[string]string{
            "id":       strconv.Itoa(user.ID),
            "username": user.Username,
            "role":     user.Role,
        }
        userInfos = append(userInfos, userInfo)
    }

    // Trả về thông tin người dùng dưới dạng JSON
    return c.JSON(http.StatusOK, userInfos)
}

// GetMe trả về thông tin người dùng hiện tại
func (controller *UserController) GetMe(c echo.Context) error {
	username := c.Get("username").(string)
	role := c.Get("role").(string)

	userInfo := map[string]string{
		"username": username,
		"role":     role,
	}

	return c.JSON(http.StatusOK, userInfo)
}

func (controller *UserController) DeleteUser(c echo.Context) error {
    userID, err := strconv.Atoi(c.Param("userID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid user ID"})
    }

    err = controller.UserService.DeleteUser(userID)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete user"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "User deleted successfully"})
}

func (controller *UserController) UpdateUser(c echo.Context) error {
    userID, err := strconv.Atoi(c.Param("userID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid user ID"})
    }

    var user models.User
    if err := c.Bind(&user); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request payload"})
    }

    err = controller.UserService.UpdateUser(userID, &user)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to update user"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "User updated successfully"})
}

func (controller *UserController) ChangePassword(c echo.Context) error {
    userID, err := strconv.Atoi(c.Param("userID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid user ID"})
    }

    var changePasswordRequest models.ChangePasswordRequest
    if err := c.Bind(&changePasswordRequest); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request payload"})
    }

    err = controller.UserService.ChangePassword(userID, &changePasswordRequest)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to change password"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Password changed successfully"})
}

func (controller *UserController) GetTopUsersByFindings(c echo.Context) error {
    users, err := controller.UserService.GetTopUsersByFindings()
    if err != nil {
        //return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to get users"})
        return err
    }
    return c.JSON(http.StatusOK, users)
}