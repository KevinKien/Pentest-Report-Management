package controllers

import (
	"net/http"
    "strconv"

	"github.com/labstack/echo"

	"pentest-report/internal/models"
	"pentest-report/internal/services"

)

type ProjectController struct {
	ProjectService *services.ProjectService
}

func NewProjectController(projectService *services.ProjectService) *ProjectController {
	return &ProjectController{ProjectService: projectService}
}

// CreateProject tạo project mới
func (controller *ProjectController) CreateProject(c echo.Context) error {
    // Bind dữ liệu từ request body vào biến project
    var project models.Project
    if err := c.Bind(&project); err != nil {
        return err
    }

    // Kiểm tra xem tên project đã tồn tại hay chưa
    exist, err := controller.ProjectService.CheckProjectExist(project.Name)
    if err != nil {
        return err
    }
    if exist {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Tên project đã tồn tại"})
    }

    // Thêm project vào cơ sở dữ liệu
    err = controller.ProjectService.AddProject(&project)
    if err != nil {
        return err
    }

    // Trả về thông báo thành công
    return c.JSON(http.StatusCreated, map[string]string{"message": "Project đã được tạo thành công"})
}

// GetAllProjectsWithTotalReports trả về danh sách tất cả các projects kèm theo tổng số báo cáo của mỗi project
func (controller *ProjectController) GetAllProjectsWithTotalReports(c echo.Context) error {
	// Lấy danh sách tất cả các projects kèm theo tổng số báo cáo của mỗi project từ service
	projects, err := controller.ProjectService.GetAllProjectsWithTotalReports()
	if err != nil {
		return err
	}
	// Trả về danh sách các projects dưới dạng JSON
	return c.JSON(http.StatusOK, projects)
}

func (controller *ProjectController) GetProjectDetail(c echo.Context) error {
	projectID, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid project ID")
	}

	projectDetail, err := controller.ProjectService.GetProjectDetailByID(projectID)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return c.JSON(http.StatusOK, projectDetail)
}

func (controller *ProjectController) DeleteProject(c echo.Context) error {
    projectID, err := strconv.Atoi(c.Param("projectID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid project ID"})
    }

    err = controller.ProjectService.DeleteProject(projectID)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to delete project"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Project deleted successfully"})
}

func (controller *ProjectController) UpdateProject(c echo.Context) error {
    projectID, err := strconv.Atoi(c.Param("projectID"))
    if err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid project ID"})
    }

    var project models.ProjectUpdate
    if err := c.Bind(&project); err != nil {
        return c.JSON(http.StatusBadRequest, map[string]string{"message": "Invalid request payload"})
    }

    err = controller.ProjectService.UpdateProject(projectID, &project)
    if err != nil {
        return c.JSON(http.StatusInternalServerError, map[string]string{"message": "Failed to update project"})
    }

    return c.JSON(http.StatusOK, map[string]string{"message": "Project updated successfully"})
}