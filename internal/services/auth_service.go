package services

import (
	"errors"

	"golang.org/x/crypto/bcrypt"

	"pentest-report/internal/models"
	"pentest-report/internal/repositories"
	"pentest-report/internal/auth"

)

type AuthService struct {
	UserRepository *repositories.UserRepository
}

func NewAuthService(userRepo *repositories.UserRepository) *AuthService {
	return &AuthService{UserRepository: userRepo}
}

// Login authenticates a user
func (s *AuthService) Login(username, password string) (*models.User, error) {
	// Implement logic to authenticate user
	user, err := s.UserRepository.GetUserByUsername(username)
	if err != nil {
		return nil, err
	}

	if user == nil {
        return nil, errors.New("user not found")
    }

	// Kiểm tra mật khẩu
    if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(password)); err != nil {
        return nil, errors.New("invalid password")
    }

	return user, nil
}


// GenerateAccessToken tạo access token JWT cho người dùng đã xác thực
func (s *AuthService) GenerateAccessToken(username, role string) (string, error) {
    return auth.GenerateToken(username, role)
}