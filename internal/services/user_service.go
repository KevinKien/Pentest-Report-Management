package services

import (
	"pentest-report/internal/models"
	"pentest-report/internal/repositories"

)

type UserService struct {
	UserRepository *repositories.UserRepository
}

func NewUserService(userRepo *repositories.UserRepository) *UserService {
	return &UserService{UserRepository: userRepo}
}

// AddUser adds a new user
func (s *UserService) AddUser(user *models.User) error {
	// Implement logic to add user
	return s.UserRepository.AddUser(user)
}

// CheckUsernameExists kiểm tra xem username đã tồn tại hay chưa
func (s *UserService) CheckUsernameExists(username string) (bool, error) {
    // Gọi phương thức từ repository để kiểm tra
    exists, err := s.UserRepository.CheckUsernameExists(username)
    if err != nil {
        return false, err
    }
    return exists, nil
}

// GetAllUsers trả về tất cả người dùng từ cơ sở dữ liệu
func (s *UserService) GetAllUsers() ([]*models.User, error) {
    users, err := s.UserRepository.GetAllUsers()
    if err != nil {
        return nil, err
    }
    return users, nil
}

func (s *UserService) DeleteUser(userID int) error {
    return s.UserRepository.DeleteUser(userID)
}

func (s *UserService) UpdateUser(userID int, user *models.User) error {
    return s.UserRepository.UpdateUser(userID, user)
}

func (s *UserService) ChangePassword(userID int, changePasswordRequest *models.ChangePasswordRequest) error {
    return s.UserRepository.ChangePassword(userID, changePasswordRequest)
}

func (s *UserService) GetTopUsersByFindings() ([]models.UserWithFindings, error) {
    return s.UserRepository.GetTopUsersByFindings()
}