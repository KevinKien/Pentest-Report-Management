package main

import (
    "fmt"
    "io"
    "log"
    "net/http"
    "os"
    "html/template"

    "github.com/labstack/echo"
    "github.com/labstack/echo/middleware"
    "github.com/joho/godotenv"

    "pentest-report/internal/auth"
    "pentest-report/internal/controllers"
    "pentest-report/internal/database/mysql"
    "pentest-report/internal/repositories"
    "pentest-report/internal/services"
    myMiddleware "pentest-report/internal/middleware"

)

type Template struct {
    templates *template.Template
}

// Render renders a template document
func (t *Template) Render(w io.Writer, name string, data interface{}, c echo.Context) error {
    return t.templates.ExecuteTemplate(w, name, data)
}

func main() {
    // Load environment variables from .env file
    if err := godotenv.Load(); err != nil {
        log.Fatal("Error loading .env file")
    }

    // Initialize Echo instance
    e := echo.New()

    // Middleware
    e.Use(middleware.Logger())
    e.Use(middleware.Recover())

    // Ensure the upload directory exists
    uploadDir := "upload"
    if err := os.MkdirAll(uploadDir, os.ModePerm); err != nil {
        log.Fatal("Failed to create upload directory: ", err)
    }

    // Database connection
    db, err := mysql.NewDB(mysql.DBConfig{
        Username: getEnv("DB_USERNAME", "root"),
        Password: getEnv("DB_PASSWORD", ""),
        Host:     getEnv("DB_HOST", "localhost"),
        Port:     getEnv("DB_PORT", "3306"),
        DBName:   getEnv("DB_NAME", "pentest_report"),
    })
    if err != nil {
        log.Fatal("Failed to connect to database: ", err)
    }
    defer db.Close()

    // Repositories
    userRepo := repositories.NewUserRepository(db)
    projectRepo := repositories.NewProjectRepository(db)
    reportRepo := repositories.NewReportRepository(db)
    findingRepo := repositories.NewFindingRepository(db)
    weaknessRepo := repositories.NewWeaknessRepository(db)

    // Services
    authService := services.NewAuthService(userRepo)
    userService := services.NewUserService(userRepo)
    projectService := services.NewProjectService(projectRepo)
    reportService := services.NewReportService(reportRepo)
    findingService := services.NewFindingService(findingRepo)
    weaknessService := services.NewWeaknessService(weaknessRepo)

    // Controllers
    authController := controllers.NewAuthController(authService)
    userController := controllers.NewUserController(userService)
    projectController := controllers.NewProjectController(projectService)
    reportController := controllers.NewReportController(reportService)
    findingController := controllers.NewFindingController(findingService)
    weaknessController := controllers.NewWeaknessController(weaknessService)
    uploadController := controllers.NewUploadController(uploadDir)

    // Cấu hình thư mục static
    e.Static("/static", "static")

    // Cấu hình thư mục templates
    t := &Template{
        templates: template.Must(template.ParseGlob("templates/*.html")),
    }

    e.Renderer = t

    // Routes FrontEnd
    e.GET("/login", func(c echo.Context) error {
        return c.Render(http.StatusOK, "login.html", nil)
    })
    e.GET("/home", func(c echo.Context) error {
        return c.Render(http.StatusOK, "home.html", nil)
    })
    e.GET("/logout", func(c echo.Context) error {
        return c.Render(http.StatusOK, "logout.html", nil)
    })
    e.GET("/users", func(c echo.Context) error {
        return c.Render(http.StatusOK, "user.html", nil)
    })
    e.GET("/projects", func(c echo.Context) error {
        return c.Render(http.StatusOK, "projects.html", nil)
    })
    e.GET("/project/:project", func(c echo.Context) error {
        project := c.Param("project")
        data := map[string]interface{}{
            "Project": project,
        }
        return c.Render(http.StatusOK, "project.html", data)
    })
    e.GET("/report/:report", func(c echo.Context) error {
        report := c.Param("report")
        data := map[string]interface{}{
            "Report": report,
        }
        return c.Render(http.StatusOK, "report.html", data)
    })
    e.GET("/weakness", func(c echo.Context) error {
        return c.Render(http.StatusOK, "weakness.html", nil)
    })

    // Routes API
    e.POST("/api/v1/login", authController.Login)
    e.GET("/api/v1/me", userController.GetMe, auth.MiddlewareJWT)

    // User API
    e.POST("/api/v1/user", userController.AddUser, auth.MiddlewareJWT, auth.MiddlewareAdmin)
    e.GET("/api/v1/users", userController.GetAllUsers, auth.MiddlewareJWT, auth.MiddlewareAdmin)
    e.DELETE("/api/v1/user/:userID", userController.DeleteUser, auth.MiddlewareJWT, auth.MiddlewareAdmin)
    e.PUT("/api/v1/user/:userID", userController.UpdateUser, auth.MiddlewareJWT, auth.MiddlewareAdmin)
    e.POST("/api/v1/user/:userID/change-password", userController.ChangePassword, auth.MiddlewareJWT)

    // Project API
    e.POST("/api/v1/project", projectController.CreateProject, auth.MiddlewareJWT)
    e.GET("/api/v1/projects", projectController.GetAllProjectsWithTotalReports, auth.MiddlewareJWT)
    e.GET("/api/v1/project/:id", projectController.GetProjectDetail, auth.MiddlewareJWT)
    e.DELETE("/api/v1/project/:projectID", projectController.DeleteProject, auth.MiddlewareJWT)
    e.PUT("/api/v1/project/:projectID", projectController.UpdateProject, auth.MiddlewareJWT)

    // Report API
    e.POST("/api/v1/report", reportController.CreateReport, auth.MiddlewareJWT)
    e.GET("/api/v1/report/:id", reportController.GetReportDetailByID, auth.MiddlewareJWT)
    e.GET("/api/v1/report/:id/findings", findingController.GetAllFindingsForReport, auth.MiddlewareJWT)
    e.DELETE("/api/v1/report/:id", reportController.DeleteReport, auth.MiddlewareJWT)
    e.PUT("/api/v1/report/:id", reportController.UpdateReport, auth.MiddlewareJWT)

    // Finding API
    e.POST("/api/v1/finding", findingController.AddFinding, auth.MiddlewareJWT)
    e.DELETE("/api/v1/finding/:findingID", findingController.DeleteFinding, auth.MiddlewareJWT)
    e.PUT("/api/v1/finding/:findingID", findingController.EditFinding, auth.MiddlewareJWT)
    e.GET("/api/v1/findings/filter", findingController.FilterFindings, auth.MiddlewareJWT)

    // Weakness API
    e.POST("/api/v1/weakness", weaknessController.AddWeakness, auth.MiddlewareJWT, auth.MiddlewareAdmin)
    e.GET("/api/v1/weakness/:id", weaknessController.GetWeaknessByID, auth.MiddlewareJWT)
    e.GET("/api/v1/weaknesses", weaknessController.GetAllWeaknesses, auth.MiddlewareJWT)
    e.DELETE("/api/v1/weakness/:id", weaknessController.DeleteWeakness, auth.MiddlewareJWT)
    e.PUT("/api/v1/weakness/:weaknessID", weaknessController.UpdateWeakness, auth.MiddlewareJWT)

    // Upload API
    e.POST("/api/v1/upload", uploadController.UploadFile, auth.MiddlewareJWT, myMiddleware.FileTypeValidatorMiddleware)
    e.GET("/upload/:filename", uploadController.ViewFile)

    // Home API
    e.GET("/api/v1/users/top", userController.GetTopUsersByFindings, auth.MiddlewareJWT)
    e.GET("/api/v1/reports/recent", reportController.GetRecentReports, auth.MiddlewareJWT)

    // Start server
    port := ":" + getEnv("SERVER_PORT", "8088")
    fmt.Println("Server is running at port", port)
    e.Logger.Fatal(e.Start(port))
}

// getEnv retrieves an environment variable or returns a default value if not set
func getEnv(key, defaultValue string) string {
    if value, exists := os.LookupEnv(key); exists {
        return value
    }
    return defaultValue
}
