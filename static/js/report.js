var uploadedFileURLs = [];

var myDropzone = new Dropzone("#kt_dropzonejs_example_1", {
    url: "/api/v1/upload", // Set the url for your upload script location
    paramName: "file", // The name that will be used to transfer the file
    maxFiles: 5,
    maxFilesize: 5, // MB
    addRemoveLinks: true,
    headers: {
        "Authorization": "Bearer " + localStorage.getItem("token")
    },
    accept: function(file, done) {
        // Get the file extension
        let fileExtension = file.name.split('.').pop().toLowerCase();
        // Define the allowed file extensions
        let allowedExtensions = ['png', 'jpeg', 'jpg', 'txt'];
        // Check if the file extension is in the allowed list
        if (allowedExtensions.includes(fileExtension)) {
            done(); // Accept the file
        } else {
            done("Error: Only files with extensions .png, .jpeg, .jpg, and .txt are allowed."); // Reject the file
        }
    },
    success: function(file, response) {
        // Lưu URL của file vào mảng uploadedFileURLs
        uploadedFileURLs.push(response.url);
    }
});


function getweaknesses() {
    fetch("/api/v1/weaknesses", {
        method: "GET",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        // get json response here
        let data = await response.json();
        if (response.status == 200) {
            // Find the select element by its ID
            let selectElement = document.getElementById('weaknessesid');

            // Clear any existing options except the first one
            selectElement.innerHTML = '<option></option>';

            // Loop through the data and create new option elements
            data.forEach(weakness => {
                let option = document.createElement('option');
                option.value = weakness.weakness_type;
                option.textContent = weakness.weakness_type;
                selectElement.appendChild(option);
            });

            // Initialize select2 on the updated select element if necessary
            if ($(selectElement).data('select2')) {
                $(selectElement).select2('destroy').select2();
            } else {
                $(selectElement).select2();
            }
        } else {
            window.location.replace("/login");
        }
    }).catch((error) => {
        console.error('Error fetching weaknesses:', error);
    });
}

getweaknesses();


function addfinding(btn) {
    findingName = document.getElementById('findingName').value;
    weaknessesid = document.getElementById('weaknessesid').value;
    findingStatus = document.getElementById('findingStatus').value;
    findingSeverity = document.getElementById('findingSeverity').value;
    findingDescription = document.getElementById('findingDescription').value;
    findingImpact = document.getElementById('findingImpact').value;
    fidningUrl = document.getElementById('fidningUrl').value;
    findingRecommended = document.getElementById('findingRecommended').value;

    var url = window.location.pathname;
    var match = url.match(/\/report\/(\d+)/);
    var report_id = parseInt(match[1]);

    fetch("/api/v1/finding", {
        method: "POST",
        mode: 'cors',
        body: JSON.stringify({
            "report_id": report_id,
            "name": findingName,
            "status": findingStatus,
            "severity": findingSeverity,
            "weakness": weaknessesid,
            "description": findingDescription,
            "impact": findingImpact,
            "link": fidningUrl,
            "recommend": findingRecommended,
            "image_urls": uploadedFileURLs
        }),
        headers: {
          "Content-type": "application/json",
          "Authorization": "Bearer " + localStorage.getItem("token")
        }
      }).then(async (response) => {
        // Lấy phản hồi dạng JSON
        let data = await response.json();
        if (response.status === 200) {
            uploadedFileURLs = [];
            // Nếu phản hồi là 200, làm mới trang
            window.location.reload(true);
        } else if (response.status === 401) {
          // Nếu phản hồi là 401, chuyển hướng đến trang đăng nhập
          window.location.replace("/login");
        }
      }).catch((error) => {
        // Xử lý lỗi nếu có
        console.error("Error:", error);
      });
}

async function report_one() {
    var url = window.location.pathname;
    var match = url.match(/\/report\/(\d+)/);
    var reportId = parseInt(match[1]);
    fetch("/api/v1/report/" + reportId, {
        method: "GET",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        // get json response here
        let data = await response.json();
        if (response.status == 200) {
            document.getElementById("reportname").innerText = data['name'];
            document.getElementById("projectdes").innerText = data['description'];
            document.getElementById("projectcreated_at").innerText = data['created_at'];
            document.getElementById("projectreport").innerText = data['total_reports'];
        } else {
            window.location.replace("/login");
        }
    });
};

    
report_one();


async function finding_one() {
    var url = window.location.pathname;
    var match = url.match(/\/report\/(\d+)/);
    var reportId = parseInt(match[1]);
    fetch("/api/v1/report/" + reportId +"/findings", {
        method: "GET",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        // get json response here
        let data = await response.json();
        if (response.status == 200) {
            var table = $("#kt_table_users").DataTable();
            table.clear(); // Clear existing rows

            for (let r of data) {
                let statusClass = r['status'] === 'Open' ? 'badge-light-info' : 'badge-light-success';
                let severity = r['severity'];
                let severityClass;

                switch (severity) {
                    case 'Critical':
                        severityClass = 'badge-light-danger';
                        break;
                    case 'High':
                        severityClass = 'badge-light-warning';
                        break;
                    case 'Medium':
                        severityClass = 'badge-light-info';
                        break;
                    case 'Low':
                        severityClass = 'badge-light-success';
                        break;
                    case 'Info':
                        severityClass = 'badge-light-secondary';
                        break;
                    default:
                        severityClass = 'badge-light-secondary';
                }
                table.row.add([
                    `<div class="d-flex align-items-center">
                        <div class="d-flex flex-column justify-content-center">
                            <a data-id="`+ r['id'] +`" onclick="ViewFinding(this.dataset.id)" class="fs-6 text-gray-800 text-hover-primary">${r['name']}</a>
                        </div>
                    </div>`,
                    `<div class="badge ${statusClass} fw-bold px-4 py-3">${r['status']}</div>`,
                    `<div class="badge ${severityClass} fw-bold px-4 py-3">${r['severity']}</div>`,
                    r['author'],
                    r['created_at'],
                    `
                    <button data-id="`+ r['id'] +`" class="btn btn-icon btn-active-light-primary w-30px h-30px me-3" data-bs-toggle="modal" data-bs-target="#kt_modal_update_permission">
                        <i class="ki-duotone ki-setting-3 fs-3"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>                            
                    </button>
                    <button data-id="`+ r['id'] +`" onclick="DeleteFinding(this.dataset.id)" class="btn btn-icon btn-active-light-primary w-30px h-30px" data-kt-permissions-table-filter="delete_row">
                        <i class="ki-duotone ki-trash fs-3"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></i>                            
                    </button>
                    `
                ]).draw(false);
            }
        } else {
            window.location.replace("/login");
        }
    });
};

    
finding_one();

function OpenModal(modalId) {
    $('#' + modalId).modal('show');
}

function DeleteReport() {
    var url = window.location.pathname;
    var match = url.match(/\/report\/(\d+)/);
    var reportId = parseInt(match[1]);
    fetch("/api/v1/report/" + reportId, {
        method: "DELETE",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        if (response.status == 200) {
            window.location.replace("/projects");
        } else {
            window.location.reload();
        }
    });
}

function UpdateNameReport() {
    var url = window.location.pathname;
    var match = url.match(/\/report\/(\d+)/);
    var reportId = parseInt(match[1]);
    var nameReport = document.getElementById('reportnameedit').value;
    fetch("/api/v1/report/" + reportId, {
        method: "PUT",
        mode: 'cors',
        body: JSON.stringify({
            "name": nameReport
        }),
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        if (response.status == 200) {
            window.location.replace(url);
        } else {
            window.location.reload();
        }
    });
}

function DeleteFinding(findingid) {
    fetch("/api/v1/finding/" + findingid, {
        method: "DELETE",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        // get json response here
        let data = await response.json();
        if (response.status == 200) {
            window.location.replace(url);
        } else {
            window.location.replace("/login");
        }
    });
}

function ViewFinding(dataId) {
    $('#kt_modal_view_finding').modal('show');
    fetch("/api/v1/findings/filter?id=" + dataId, {
        method: "GET",
        mode: 'cors',
        headers: {
            "Content-type": "application/json",
            "Authorization": "Bearer " + localStorage.getItem("token")
        }
    }).then(async (response) => {
        // get json response here
        let data = await response.json();
        if (response.status == 200) {
            document.getElementById('viewfindingname').value = data[0]['name'];
            document.getElementById('viewfindingWeakness').value = data[0]['weakness'];
            document.getElementById('viewfindingStatus').value = data[0]['status'];
            document.getElementById('viewfindingSeverity').value = data[0]['severity'];
            document.getElementById('viewfindingDescription').value  = data[0]['description'];
            document.getElementById('viewfindingImpact').value  = data[0]['impact'];
            document.getElementById('viewfindingUrl').value  = data[0]['link'];
            document.getElementById('viewfindingRecommended').value  = data[0]['recommend'];
            // Chèn ảnh
            const viewPocDiv = document.getElementById('viewpoc');
            viewPocDiv.innerHTML = ''; // Xóa nội dung cũ

            // Ưu tiên sử dụng image_urls nếu có
            const imageUrls = data[0]['image_urls'] || (data[0]['image_url'] ? data[0]['image_url'].split(',') : []);

            imageUrls.forEach(imageUrl => {
                const fullImageUrl = "http://127.0.0.1:8088" + imageUrl; // Tạo đường dẫn đầy đủ
            
                const img = new Image(); 
            
                img.onload = function() {
                    img.alt = 'poc';
                    viewPocDiv.appendChild(img);
                };
            
                img.onerror = function() {
                    console.error("Không thể tải ảnh:", fullImageUrl); // In ra đường dẫn đầy đủ để debug
                    // (Tùy chọn) Hiển thị ảnh lỗi mặc định
                };
            
                img.src = fullImageUrl; 
            });
        } else {
            window.location.replace("/login");
        }
    });
}